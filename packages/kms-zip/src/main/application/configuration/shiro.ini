[main]
# setting ssl.enabled to false disables the "ssl required" filter
ssl.enabled = true
ssl.port = 443

memoryTokenRealm=com.intel.mtwilson.shiro.authc.token.MemoryTokenRealm
tokenMatcher=com.intel.mtwilson.shiro.authc.token.TokenCredentialsMatcher
memoryTokenRealm.credentialsMatcher = $tokenMatcher
memoryTokenRealm.authorizationCachingEnabled = false

filePasswordRealm=com.intel.mtwilson.shiro.file.FilePasswordRealm
#filePasswordRealm.userFilePath=/opt/trustagent/configuration/users.txt
#filePasswordRealm.permissionFilePath=/opt/trustagent/configuration/permissions.txt
passwordMatcher=com.intel.mtwilson.shiro.authc.password.PasswordCredentialsMatcher
filePasswordRealm.credentialsMatcher=$passwordMatcher
filePasswordRealm.authorizationCachingEnabled=false

hmacMatcher = com.intel.mtwilson.shiro.authc.hmac.HmacCredentialsMatcher
memoryHmacRealm = com.intel.mtwilson.shiro.authc.hmac.MemoryHmacRealm
memoryHmacRealm.credentialsMatcher = $hmacMatcher
memoryHmacRealm.authorizationCachingEnabled = false

x509Matcher = com.intel.mtwilson.shiro.authc.dhsm2.x509.X509CredentialsIssuerDNSNMatcher
x509Realm = com.intel.mtwilson.shiro.authc.dhsm2.x509.X509Realm
x509Realm.credentialsMatcher = $x509Matcher

jwtRealm=com.intel.mtwilson.shiro.authc.token.JWTRealm
jwtMatcher=com.intel.mtwilson.shiro.authc.token.JWTSignatureMatcher
jwtRealm.credentialsMatcher=$jwtMatcher
jwtRealm.applicationName=KMS

securityManager.realms = $memoryHmacRealm, $memoryTokenRealm, $filePasswordRealm, $x509Realm, $jwtRealm

# built-in authentication strategy
#authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#authcStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authcStrategy = com.intel.mtwilson.shiro.LoggingAtLeastOneSuccessfulStrategy
securityManager.authenticator.authenticationStrategy = $authcStrategy

authcToken = com.intel.mtwilson.shiro.authc.token.TokenAuthenticationFilter
authcToken.applicationName = Key Management Server
authcToken.sendChallenge = false
authcToken.permissive = false

jwtauthcToken = com.intel.mtwilson.shiro.authc.token.JWTTokenAuthenticationFilter
jwtauthcToken.applicationName = KMS
jwtauthcToken.sendChallenge = false
jwtauthcToken.permissive = false

authcQueryToken = com.intel.mtwilson.shiro.authc.token.QueryStringTokenAuthenticationFilter
authcQueryToken.applicationName = Key Server
authcQueryToken.sendChallenge = false

authcPassword=com.intel.mtwilson.shiro.authc.password.HttpBasicAuthenticationFilter
authcPassword.applicationName = Key Management Server
authcPassword.authcScheme = NoPrompt
authcPassword.authzScheme = Basic
authcPassword.sendChallenge = false

authcSessionHmac = com.intel.mtwilson.shiro.authc.hmac.HmacAuthenticationFilter
authcSessionHmac.applicationName = Key Server
authcSessionHmac.sendChallenge = false
authcSessionHmac.authenticationScheme = HMAC

authcX509 = com.intel.mtwilson.shiro.authc.dhsm2.x509.X509AuthenticationFilter

# define security by url matching, the first match wins so order is important
# also /path/*  will match /path/a and /path/b but not /path/c/d
# but /path/**  will match /path/a and /path/b and also /path/c/d
[urls]
/index.html = anon
/v1/resources/** = ssl
/v1/html5/public/** = ssl
/v1/login = ssl
/v1/version = ssl
/v1/keys/*/transfer = jwtauthcToken[permissive]
/v1/images/*/downloads*/* = ssl, authcToken, authcQueryToken, authcPassword
/v1/keys/*/dhsm2-transfer = ssl, authcX509
/v1/session = ssl, authcX509
/v1/** = ssl, jwtauthcToken , authcToken, authcPassword
